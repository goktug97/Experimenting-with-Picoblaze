/////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007 Xilinx, Inc.
// All Rights Reserved
/////////////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: 1.00
//  \   \         Filename: ROM_form.v
//  /   /         Date Last Modified:  17th January 2007
// /___/   /\     Date Created: 17th January 2007
// \   \  /  \
//  \___\/\___\
//
// Device: Xilinx
// Purpose: 	
// This is the Verilog template file for the KCPSM4 assembler.
// It is used to configure block Memory of a Spartan-3 Generation, 
// Virtex-II(Pro) or Virtex-4 to act as a single port program ROM.
//
// This Verilog file is not valid as input directly into a synthesis or 
// simulation tool.	The assembler will read this template and insert the 
// data required to complete the definition of program ROM and write it out 
// to a new '.v' file associated with the name of the original '.psm' file 
// being assembled.
//
// This template can be modified to define alternative memory definitions 
// such as dual port.  However, you are responsible for ensuring the template
// is correct as the assembler does not perform any checking of the Verilog.
//
// The assembler identifies all text enclosed by {} characters, and replaces 
// these character strings. All templates should include these {} character 
// strings for the assembler to work correctly. 
//
// This template defines a Block Memory configured in 1024 x 18-bit single port 
// mode and connected to act as a single port ROM.
//
// Revision History:
//  Rev 1.00 - njs - Converted from ROM-form.v for KCPSM3 adding support 
//                   for paging mechanism of KCPSM4 - December 2006
//  Rev 1.01 - kc  - Minor format changes 17 Jan 2007
//
/////////////////////////////////////////////////////////////////////////////////////////
// Contact: e-mail  picoblaze@xilinx.com
/////////////////////////////////////////////////////////////////////////////////////////
//
// Disclaimer: 
// LIMITED WARRANTY AND DISCLAIMER. These designs are
// provided to you "as is". Xilinx and its licensors make and you
// receive no warranties or conditions, express, implied,
// statutory or otherwise, and Xilinx specifically disclaims any
// implied warranties of merchantability, non-infringement, or
// fitness for a particular purpose. Xilinx does not warrant that
// the functions contained in these designs will meet your
// requirements, or that the operation of these designs will be
// uninterrupted or error free, or that defects in the Designs
// will be corrected. Furthermore, Xilinx does not warrant or
// make any representations regarding use or the results of the
// use of the designs in terms of correctness, accuracy,
// reliability, or otherwise.
//
// LIMITATION OF LIABILITY. In no event will Xilinx or its
// licensors be liable for any loss of data, lost profits, cost
// or procurement of substitute goods or services, or for any
// special, incidental, consequential, or indirect damages
// arising from the use or operation of the designs or
// accompanying documentation, however caused and on any theory
// of liability. This limitation will apply even if Xilinx
// has been advised of the possibility of such damage. This
// limitation shall apply not-withstanding the failure of the 
// essential purpose of any limited remedies herein. 
//
/////////////////////////////////////////////////////////////////////////////////////////

The next line is used to determine where the template actually starts and must exist.
{begin template}
/////////////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: v1.00
//  \   \         Application : KCPSM4
//  /   /         Filename: {name}.v
// /___/   /\     
// \   \  /  \
//  \___\/\___\
//
// Command: KCPSM4 {name}.psm
// Device: Spartan-3 Generation, Virtex-II(Pro), and Virtex-4 FPGAs
// Design Name: {name}
// Purpose: {name} verilog program definition.
//
//
// Generated by KCPSM4 Assembler {timestamp}. 
//
// Note that 'page_select' should be tied to the appropriate 'page' output from 
// the KCPSM4 macro. In the normal case of program requiring only a single BRAM 
// the 'page_select' input may also be permanently tied Low in the design. 
//
// Reference: PicoBlaze 8-bit Embedded Microcontroller User Guide
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// NOTICE:
//
// Copyright Xilinx, Inc. 2007.   This code may be contain portions patented by other 
// third parties.  By providing this core as one possible implementation of a standard,
// Xilinx is making no representation that the provided implementation of this standard 
// is free from any claims of infringement by any third party.  Xilinx expressly 
// disclaims any warranty with respect to the adequacy of the implementation, including 
// but not limited to any warranty or representation that the implementation is free 
// from claims of any third party.  Furthermore, Xilinx is providing this core as a 
// courtesy to you and suggests that you contact all third parties to obtain the 
// necessary rights to use this implementation.
//
/////////////////////////////////////////////////////////////////////////////////////////
//


`timescale 1 ps / 1ps

module {name} (

input 	[9:0] 	address,
input		clk,
output 	[17:0] 	instruction );

RAMB16_S18 	#(
	.INIT_00(256'h{INIT_00}),
	.INIT_01(256'h{INIT_01}),	
	.INIT_02(256'h{INIT_02}),	
	.INIT_03(256'h{INIT_03}),	
	.INIT_04(256'h{INIT_04}),	
	.INIT_05(256'h{INIT_05}),	
	.INIT_06(256'h{INIT_06}),	
	.INIT_07(256'h{INIT_07}),	
	.INIT_08(256'h{INIT_08}),	
	.INIT_09(256'h{INIT_09}),	
	.INIT_0A(256'h{INIT_0A}),	
	.INIT_0B(256'h{INIT_0B}),	
	.INIT_0C(256'h{INIT_0C}),	
	.INIT_0D(256'h{INIT_0D}),	
	.INIT_0E(256'h{INIT_0E}),	
	.INIT_0F(256'h{INIT_0F}),	
	.INIT_10(256'h{INIT_10}),	
	.INIT_11(256'h{INIT_11}),	
	.INIT_12(256'h{INIT_12}),	
	.INIT_13(256'h{INIT_13}),	
	.INIT_14(256'h{INIT_14}),	
	.INIT_15(256'h{INIT_15}),	
	.INIT_16(256'h{INIT_16}),	
	.INIT_17(256'h{INIT_17}),	
	.INIT_18(256'h{INIT_18}),	
	.INIT_19(256'h{INIT_19}),	
	.INIT_1A(256'h{INIT_1A}),	
	.INIT_1B(256'h{INIT_1B}),	
	.INIT_1C(256'h{INIT_1C}),	
	.INIT_1D(256'h{INIT_1D}),	
	.INIT_1E(256'h{INIT_1E}),	
	.INIT_1F(256'h{INIT_1F}),	
	.INIT_20(256'h{INIT_20}),	
	.INIT_21(256'h{INIT_21}),	
	.INIT_22(256'h{INIT_22}),	
	.INIT_23(256'h{INIT_23}),	
	.INIT_24(256'h{INIT_24}),	
	.INIT_25(256'h{INIT_25}),	
	.INIT_26(256'h{INIT_26}),	
	.INIT_27(256'h{INIT_27}),	
	.INIT_28(256'h{INIT_28}),	
	.INIT_29(256'h{INIT_29}),	
	.INIT_2A(256'h{INIT_2A}),	
	.INIT_2B(256'h{INIT_2B}),	
	.INIT_2C(256'h{INIT_2C}),	
	.INIT_2D(256'h{INIT_2D}),	
	.INIT_2E(256'h{INIT_2E}),	
	.INIT_2F(256'h{INIT_2F}),	
	.INIT_30(256'h{INIT_30}),	
	.INIT_31(256'h{INIT_31}),	
	.INIT_32(256'h{INIT_32}),	
	.INIT_33(256'h{INIT_33}),	
	.INIT_34(256'h{INIT_34}),	
	.INIT_35(256'h{INIT_35}),	
	.INIT_36(256'h{INIT_36}),	
	.INIT_37(256'h{INIT_37}),	
	.INIT_38(256'h{INIT_38}),	
	.INIT_39(256'h{INIT_39}),	
	.INIT_3A(256'h{INIT_3A}),	
	.INIT_3B(256'h{INIT_3B}),	
	.INIT_3C(256'h{INIT_3C}),	
	.INIT_3D(256'h{INIT_3D}),	
	.INIT_3E(256'h{INIT_3E}),	
	.INIT_3F(256'h{INIT_3F}),
	.INITP_00(256'h{INITP_00}),
	.INITP_01(256'h{INITP_01}),
	.INITP_02(256'h{INITP_02}),	
	.INITP_03(256'h{INITP_03}),	
	.INITP_04(256'h{INITP_04}),	
	.INITP_05(256'h{INITP_05}),	
	.INITP_06(256'h{INITP_06}),	
	.INITP_07(256'h{INITP_07}))
ram_1024_x_18(
	.DI   	(16'h0000),
	.DIP  	(2'b00),
	.EN   	(1'b1),
	.WE   	(1'b0),
	.SSR  	(1'b0),
	.CLK  	(clk),
	.ADDR 	(address),
	.DO   	(instruction[15:0]),
	.DOP  	(instruction[17:16])) ;

endmodule

// END OF FILE {name}.v